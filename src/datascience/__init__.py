## Importing necessary modules
import os                 # Imports the 'os' module, which provides functions for interacting with the operating system. 
                          # 'os' is commonly used for creating directories, file path manipulations, and other OS-related tasks.

import sys                # Imports the 'sys' module, which provides access to system-specific parameters and functions.
                          # 'sys' is often used to handle input/output operations or to interact with the Python runtime environment.

import logging            # Imports the 'logging' module, which provides a flexible framework for emitting log messages from Python programs.
                          # Logging is essential for tracking the progress and debugging issues within an application.

## Setting up logging format
logging_str = "[%(asctime)s: %(levelname)s: %(module)s: %(message)s]"
# Defines a logging format string stored in 'logging_str'.
# '%(asctime)s' inserts the timestamp, '%(levelname)s' shows the log level (e.g., INFO, ERROR), '%(module)s' displays the module name,
# and '%(message)s' includes the actual log message. This format makes logs readable and informative.

## Defining log directory and file path
log_dir = "logs"                     # Sets 'log_dir' to "logs", the name of the folder where log files will be saved.
                                     # This directory will be used to store all log files generated by this script.

log_filepath = os.path.join(log_dir, "logging.log") 
# Combines 'log_dir' and "logging.log" to create the full file path for the log file. 
# 'os.path.join' ensures that the file path is properly formatted across different operating systems.

## Creating the log directory if it doesnâ€™t exist
os.makedirs(log_dir, exist_ok=True)  # Creates the 'logs' directory if it does not already exist.
                                     # 'exist_ok=True' ensures that an error is not raised if the directory already exists.

## Configuring the logging system
logging.basicConfig(
    level=logging.INFO,                # Sets the minimum log level to INFO. This means that all messages at the INFO level or higher will be logged.
                                       # Log levels help filter messages, with DEBUG, INFO, WARNING, ERROR, and CRITICAL as options.

    format=logging_str,                # Specifies the format for log messages, using 'logging_str' defined earlier.
                                       # This format will be applied to each message that is logged, improving message consistency.

    handlers=[                         # Defines a list of handlers, which determine where log messages are sent.
        logging.FileHandler(log_filepath),  # Adds a FileHandler, which directs log messages to the file at 'log_filepath'.
                                            # This handler ensures that messages are saved to the specified log file.

        logging.StreamHandler(sys.stdout)   # Adds a StreamHandler that sends log messages to 'sys.stdout' (console output).
                                            # Using both handlers allows messages to be saved to a file and printed to the console simultaneously.
    ]
)

## Creating a custom logger
logger = logging.getLogger("datasciencelogger") 
# Retrieves a logger instance with the name "datasciencelogger". 
# Using 'getLogger' with a custom name makes it easier to identify log messages from this particular script when multiple loggers are used.
